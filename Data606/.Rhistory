# parsing from Wikipedia web site
# heritage_parsed <- htmlParse("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
# parsing from locally stored HTML file
heritage_parsed <- htmlParse("worldheritagedanger.htm",encoding="UTF-8")
tables <- readHTMLTable(heritage_parsed, stringsAsFactors = FALSE)
# danger_table <- readHTMLTable(heritage_parsed, stringsAsFactors = FALSE, which = 2) # alternatively: directly select second table
# extract desired table
danger_table <- tables[[2]]
names(danger_table)
# select and rename columns
danger_table <- danger_table[,c(1,3,4,6,7)]
colnames(danger_table) <- c("name","locn","crit","yins","yend")
danger_table$name[1:3]
# cleanse criteria
danger_table$crit <- ifelse(str_detect(danger_table$crit, "Natural")==T, "nat", "cult")
# cleanse years
danger_table$yins <- as.numeric(danger_table$yins)
danger_table$yend
yend_clean <- unlist(str_extract_all(danger_table$yend, "\\d{4}[^\\d]*$"))
yend_clean <- unlist(str_extract_all(yend_clean, "[[:digit:]]{4}"))
danger_table$yend <- as.numeric(yend_clean)
danger_table$yend[1:3]
danger_table$locn[c(1,3,5)]
reg_y <- "[/][-1]*[[:digit:]]*[.]*[[:digit:]]*[;]"
reg_x <- "[;][-1]*[[:digit:]]*[.]*[[:digit:]]*"
y_coords <- str_extract(danger_table$locn, reg_y)
reg_y <- "[/][ -]*[[:digit:]]*[.]*[[:digit:]]*[;]"
reg_x <- "[;][ -]*[[:digit:]]*[.]*[[:digit:]]*"
y_coords <- str_extract(danger_table$locn, reg_y)
y_coords <- as.numeric(str_sub(y_coords, 3, -2))
reg_y <- "[/][ -]*[[:digit:]]*[.]*[[:digit:]]*[;]"
reg_x <- "[;][ -]*[[:digit:]]*[.]*[[:digit:]]*"
y_coords <- str_extract(danger_table$locn, reg_y)
y_coords <- as.numeric(str_sub(y_coords, 3, -2))
danger_table$y_coords <- y_coords
x_coords <- str_extract(danger_table$locn, reg_x)
x_coords <- as.numeric(str_sub(x_coords, 3, -1))
danger_table$x_coords <- x_coords
danger_table$locn <- NULL
round(danger_table$y_coords, 2)[1:3]
round(danger_table$y_coords, 2)[1:3]
round(danger_table$x_coords, 2)]1:3]
round(danger_table$y_coords, 2)[1:3]
round(danger_table$x_coords, 2)[1:3]
dim(danger_table)
head(danger_table)
par(oma=c(0,0,0,0))
par(mar=c(0,0,0,0))
pch <- ifelse(danger_table$crit == "nat", 19, 2)
map("world", col = "darkgrey", lwd = 0.5, mar = c(0.1,0.1,0.1,0.1))
points(danger_table$x_coords, danger_table$y_coords, pch = pch, col = "black", cex = .8)
box()
table(danger_table$crit)
# cleanse criteria
danger_table$crit <- ifelse(str_detect(danger_table$crit, "Natural")==TRUE, "nat", "cult")
danger_table$crit[1:3]
View(danger_table)
### --------------------------------------------------------------
### AUTOMATED DATA COLLECTION WITH R
### SIMON MUNZERT, CHRISTIAN RUBBA, PETER MEISSNER, DOMINIC NYHUIS
###
### CODE CHAPTER 1: INTRODUCTION
### --------------------------------------------------------------
# load packages
library(stringr)
library(XML)
library(maps)
### 1.1. Case Study: World Heritage Sites in Danger
### --------------------------------------------------------------
# parsing from Wikipedia web site
# heritage_parsed <- htmlParse("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
# parsing from locally stored HTML file
#heritage_parsed <- htmlParse("worldheritagedanger.htm",encoding="UTF-8")
#tables <- readHTMLTable(heritage_parsed, stringsAsFactors = FALSE)
# danger_table <- readHTMLTable(heritage_parsed, stringsAsFactors = FALSE, which = 2) # alternatively: directly select second table
#The next three lines of code are from the errata
library(rvest) # the new package, version 0.3.0
# read_html() from the rvest package is the new htmlParse() from the XML package
heritage_parsed <- read_html("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
# html_table() from the rvest package, which replaces readHTMLTable() from the XML package
tables <- html_table(heritage_parsed, fill = TRUE)
# extract desired table
danger_table <- tables[[2]]
names(danger_table)
# select and rename columns
danger_table <- danger_table[,c(1,3,4,6,7)]
colnames(danger_table) <- c("name","locn","crit","yins","yend")
danger_table$name[1:3]
# cleanse criteria
danger_table$crit <- ifelse(str_detect(danger_table$crit, "Natural")==TRUE, "nat", "cult")
danger_table$crit[1:3]
# cleanse years
danger_table$yins <- as.numeric(danger_table$yins)
danger_table$yend
yend_clean <- unlist(str_extract_all(danger_table$yend, "\\d{4}[^\\d]*$"))
yend_clean <- unlist(str_extract_all(yend_clean, "[[:digit:]]{4}"))
danger_table$yend <- as.numeric(yend_clean)
danger_table$yend[1:3]
#location variables
danger_table$locn[c(1,3,5)]
reg_y <- "[/][ -]*[[:digit:]]*[.]*[[:digit:]]*[;]"
reg_x <- "[;][ -]*[[:digit:]]*[.]*[[:digit:]]*"
y_coords <- str_extract(danger_table$locn, reg_y)
y_coords <- as.numeric(str_sub(y_coords, 3, -2))
danger_table$y_coords <- y_coords
x_coords <- str_extract(danger_table$locn, reg_x)
x_coords <- as.numeric(str_sub(x_coords, 3, -1))
danger_table$x_coords <- x_coords
danger_table$locn <- NULL
round(danger_table$y_coords, 2)[1:3]
round(danger_table$x_coords, 2)[1:3]
dim(danger_table)
head(danger_table)
# plot endangered heritage sites
#pdf(file="heritage-map.pdf", height=3.3, width=7, family="URWTimes")
par(oma=c(0,0,0,0))
par(mar=c(0,0,0,0))
pch <- ifelse(danger_table$crit == "nat", 19, 2)
map("world", col = "darkgrey", lwd = 0.5, mar = c(0.1,0.1,0.1,0.1))
points(danger_table$x_coords, danger_table$y_coords, pch = pch, col = "black", cex = .8)
box()
table(danger_table$crit)
# plot year of endangerment
#pdf(file="heritage-hist1.pdf", height=3.3, width=7, family="URWTimes")
par(oma=c(0,0,0,0))
par(mar=c(4,4,1,.5))
hist(danger_table$yend, freq=TRUE, xlab="Year when site was put on the list of endangered sites", main="")
box()
#dev.off()
# plot year of endangerment
#pdf(file="heritage-hist1.pdf", height=3.3, width=7, family="URWTimes")
par(oma=c(0,0,0,0))
par(mar=c(4,4,1,.5))
hist(danger_table$yend, freq=TRUE, xlab="Year when site was put on the list of endangered sites", main="")
box()
#dev.off()
# plot time between inscription and endangerment
duration <- danger_table$yend - danger_table$yins
#pdf(file="heritage-hist2.pdf", height=3.3, width=7, family="URWTimes")
par(oma=c(0,0,0,0))
par(mar=c(4,4,1,.5))
hist(duration, freq=TRUE, xlab="Years it took to become an endangered site", main="")
box()
#dev.off()
View(danger_table)
install.packages(c('openintro','OIdata','devtools','ggplot2','psych','reshape2',
'knitr','markdown','shiny'))
devtools::install_github("jbryer/DATA606")
library(DATA606)
startLab('Lab0')
source("more/arbuthnot.R")
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
arbuthnot$girls
plot(x = arbuthnot$year, y = arbuthnot$girls)
plot(x = arbuthnot$year, y = arbuthnot$girls, type = "l")
?plot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
plot(arbuthnot$year, arbuthnot$boys + arbuthnot$girls, type = "l")
5218 / 4683
arbuthnot$boys / arbuthnot$girls
5218 / (5218 + 4683)
arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls)
plot(arbuthnot$year, arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls), type = "l")
arbuthnot$boys > arbuthnot$girls
source("more/present.R")
present
present
min(present$year)
max(present$year)
present
lower <- min(present$year)
upper <- max(present$year)
present$boys
present$girls
plot(arbuthnot$year, present$boys / present$girls), type = "l")
plot(arbuthnot$year, (present$boys / present$girls), type = "l")
plot(present$year, (present$boys / present$girls), type = "l")
present$boys / present$girls
present$boys > present$girls
dim(present)
names(present)
maxpresent <- which.max(present$boys+present$girls)
maxpresent <- present$year[which.max(present$boys+present$girls)]
source("more/arbuthnot.R")
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
arbuthnot$girls
plot(x = arbuthnot$year, y = arbuthnot$girls)
plot(x = arbuthnot$year, y = arbuthnot$girls, type = "l")
?plot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
plot(arbuthnot$year, arbuthnot$boys + arbuthnot$girls, type = "l")
5218 / 4683
arbuthnot$boys / arbuthnot$girls
5218 / (5218 + 4683)
arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls)
plot(arbuthnot$year, arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls), type = "l")
arbuthnot$boys > arbuthnot$girls
source("more/present.R")
present
lower <- min(present$year)
upper <- max(present$year)
dim(present)
names(present)
present$boys
present$girls
present$boys / present$girls
plot(present$year, (present$boys / present$girls), type = "l")
present$boys > present$girls
maxpresent <- present$year[which.max(present$boys+present$girls)]
knitr::opts_chunk$set(echo = TRUE)
install.packages("RCurl")
library(RCurl)
install.packages("plyr")
library(plyr)
location <- "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data"
mushroomData <- getURL(location)
mushroomDF <-  read.csv(text=mushroomData,header=F,sep=",")
head(mushroomDF)
mushroomDF <- mushroomDF[,c(1,4,6,10,21)]
str(mushroomDF)
colnames(mushroomDF) <- c("edibility", "cap-color", "odor", "gill-color","spore-print-color")
head(mushroomDF)
mushroomDF$edibility <- revalue(mushroomDF$edibility, c("e" = "edible", "p" = "poisonous"))
View(mushroomDF)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("RCurl")
library(RCurl)
#install.packages("plyr")
library(plyr)
mushroomDF$`cap-color` <- revalue(mushroomDF$`cap-color`,c("n" = "brown", "b" = "buff", "c" = "cinnamon",
"g" = "gray", "r" = "green", "p" = "pink",
"u" = "purple", "e" = "red", "w" = "white",
"y" = "yellow"))
View(mushroomDF)
str(mushroomDF)
head(mushroomDF)
mushroomDF$edibility <- revalue(mushroomDF$edibility, c("e" = "edible", "p" = "poisonous"))
mushroomDF$`cap-color` <- revalue(mushroomDF$`cap-color`,c("n" = "brown", "b" = "buff", "c" = "cinnamon",
"g" = "gray", "r" = "green", "p" = "pink",
"u" = "purple", "e" = "red", "w" = "white",
"y" = "yellow"))
mushroomDF$odor<- revalue(mushroomDF$odor, c("a" = "almond", "l" = "anise", "c" = "creosote",
"y" = "fishy", "f" = "foul", "m" = "musty",
"n" = "none", "p" = "pungent", "s" = "spicy"))
mushroomDF$`gill-color`<- revalue(mushroomDF$`gill-color`, c("k" = "black", "n" = "brown", "b" = "buff",
"h" = "chocolate", "g" = "gray", "r" = "green",                                                              "o" = "orange", "p" = "pink", "u" = "purple",
"e" = "red", "w" = "white",
"y" = "yellow"))
mushroomDF$`spore-print-color` <- revalue(mushroomDF$`spore-print-color`,
c("k" = "black", "n" = "brown", "b" = "buff",
"h" = "chocolate", "r" = "green",                                                                            "o" = "orange", "u" = "purple", "w" = "white",                                                               "y" = "yellow"))
str(mushroomDF)
head(mushroomDF)
knit_with_parameters('~/CUNY MSDA/MSDA Github repository/Data607/Assignment1.Rmd')
unlink('CUNY MSDA/MSDA Github repository/Data607/Assignment1_cache', recursive = TRUE)
library(DATA606)
load("more/kobe.RData")
head(kobe)
kobe_streak <- calc_streak(kobe$basket)
barplot(table(kobe_streak))
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)
count(sim_unfair_coin == "head")
length(sim_unfair_coin == "head")
length(sim_unfair_coin == "heads")
sim_unfair_coin[names(sim_fair_coin) == "heads"]
names(sim_unfair_coin)
sim_unfair_coin[names(sim_fair_coin) == "heads"]
sim_unfair_coin[sim_fair_coin == "heads"]
sim_unfair_coin[sim_unfair_coin == "heads"]
sum(sim_unfair_coin == "heads")
?sample
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
sim_basket <- sample(outcomes, size = 1, replace = TRUE, prob = c(0.45,0.55))
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob = c(0.45,0.55))
kobe$basket
sim_basket
sim_streak <- calc_streak(sim_basket)
plot(sim_streak)
barplot(table(sim_streak))
combined <- table(kobe_streak, sim_streak)
kobe_streak <- calc_streak(kobe$basket)
barplot(table(kobe_streak))
kobe_streak <- calc_streak(kobe$basket)
table(kobe_streak)
barplot(table(kobe_streak))
kobe$basket[1:9]
kobe$basket
kobe_streak <- calc_streak(kobe$basket)
kobe_streak
table(kobe_streak)
barplot(table(kobe_streak))
kobe_streak <- calc_streak(kobe$basket)
barplot(table(kobe_streak))
kobe$basket[1:9]
kobe_mode <- mode(kobe_streak)
kobe_max <- max(kodbe_streak)
kobe_mode <- mode(kobe_streak)
kobe_max <- max(kobe_streak)
kobe_mode <- table(kobe_streak)[which.max[kobe_streak]]
kobe_table <- table(kobe_streak)
kobe_mode <- kobe_table[which.max(kobe_table)]
kobe_max <- max(kobe_streak)
kobe_table <- table(kobe_streak)
kobe_table[which.max(kobe_table)]
kobe_max <- max(kobe_streak)
kobe_table <- table(kobe_streak)
kobe_mode <- kobe_table[which.max(kobe_table)]
kobe_max <- max(kobe_streak)
kobe_table
kobe_table <- table(kobe_streak)
kobe_mode <- names(kobe_table)[which.max(kobe_table)]
kobe_max <- max(kobe_streak)
kobe_table
kobe_table <- table(kobe_streak)
kobe_mode <- names(kobe_table)[which.max(kobe_table)]
kobe_max <- max(kobe_streak)
sim_table <- table(sim_streak)
sim_mode <- names(sim_table)[which.max(sim_table)]
sim_max <- max(sim_streak)
barplot(sim_table)
load("more/kobe.RData")
head(kobe)
kobe$basket[1:9]
kobe_streak <- calc_streak(kobe$basket)
barplot(table(kobe_streak))
kobe_table <- table(kobe_streak)
kobe_mode <- names(kobe_table)[which.max(kobe_table)]
kobe_max <- max(kobe_streak)
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sum(sim_unfair_coin == "heads")
?sample
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob = c(0.45,0.55))
kobe$basket
sim_basket
sim_streak <- calc_streak(sim_basket)
sim_table <- table(sim_streak)
sim_mode <- names(sim_table)[which.max(sim_table)]
sim_max <- max(sim_streak)
barplot(sim_table)
mydb = dbConnect(MySQL(), user='root', password='admin', dbname='tb', host='localhost')
knitr::opts_chunk$set(echo = TRUE)
install.packages("RMYSQL")
install.packages("RMySQL")
library(RMySQL)
mydb = dbConnect(MySQL(), user='data607', password='password', dbname='tb', host='localhost')
mydb = dbConnect(MySQL(), user='root', password='admin', dbname='data607Assignment2nn', host='localhost')
ratingsdb = dbConnect(MySQL(), user='root', password='admin', dbname='data607Assignment2nn', host='localhost')
ratingsData <- dbGetQuery("SELECT Reviewers.ReviewerName, Movies.MovieName, Ratings.Rating FROM Ratings
RIGHT JOIN Reviewers
ON Ratings.Reviewer = Reviewers.ReviewerID
LEFT JOIN Movies
ON Ratings.Movie = Movies.MovieID
ORDER BY MovieName;")
?dbGetQuery
ratingsData <- dbGetQuery(ratingsdb,
"SELECT Reviewers.ReviewerName, Movies.MovieName, Ratings.Rating FROM Ratings
RIGHT JOIN Reviewers
ON Ratings.Reviewer = Reviewers.ReviewerID
LEFT JOIN Movies
ON Ratings.Movie = Movies.MovieID
ORDER BY MovieName;")
View(ratingsData)
ratingsdb = dbConnect(MySQL(), user='data607nn', password='password', dbname='data607Assignment2nn', host='localhost')
ratingsData <- dbGetQuery(ratingsdb,
"SELECT Reviewers.ReviewerName, Movies.MovieName, Ratings.Rating FROM Ratings
RIGHT JOIN Reviewers
ON Ratings.Reviewer = Reviewers.ReviewerID
LEFT JOIN Movies
ON Ratings.Movie = Movies.MovieID
ORDER BY MovieName;")
rownames(installed.packages())
knitr::opts_chunk$set(echo = TRUE)
if("RMySQL" %in% rownames(installed.packages()) == FALSE) {install.packages("RMySQL")}
library(RMySQL)
ratingsdb = dbConnect(MySQL(), user='data607nn', password='password', dbname='data607Assignment2nn', host='localhost')
ratingsData <- dbGetQuery(ratingsdb,
"SELECT Reviewers.ReviewerName, Movies.MovieName, Ratings.Rating FROM Ratings
RIGHT JOIN Reviewers
ON Ratings.Reviewer = Reviewers.ReviewerID
LEFT JOIN Movies
ON Ratings.Movie = Movies.MovieID
ORDER BY MovieName;")
View(ratingsData)
aggdata <-aggregate(ratingsData, by=list(MovieName),
FUN=mean, na.rm=TRUE)
aggdata <-aggregate(ratingsData, by=list(ratingsData$MovieName),
FUN=mean, na.rm=TRUE)
View(aggdata)
aggdata2<- aggregate(Rating, MovieName, ratingsData, mean)
aggdata2<- aggregate(ratingsData$Rating, ratingsData$MovieName, ratingsData, mean)
barplot((aggdata))
barplot(aggdata$Rating)
barplot(aggdata$Rating~group.1)
aggregate(Rating ~ MovieName, data = ratingsDAta, FUN=mean)
aggregate(Rating ~ MovieName, data = ratingsData, FUN=mean)
aggdata <- aggregate(Rating ~ MovieName, data = ratingsData, FUN=mean)
barplot(aggdata)
aggdata <- aggregate(Rating ~ MovieName, data = ratingsData, FUN=mean)
barplot(aggdata$Rating)
aggdata <- aggregate(Rating ~ MovieName, data = ratingsData, FUN=mean)
barplot(aggdata$Rating,names.arg = aggData$MovieName)
aggdata <- aggregate(Rating ~ MovieName, data = ratingsData, FUN=mean)
library(DATA606)
startLab("Lab3")
startLab("Lab3")
startLab("Lab3")
library(DATA606)
startLab("Lab 4a")
getLabs()
startLab("Lab4a")
setwd("~/CUNY MSDA/MSDA Github repository/Data606")
startLab("Lab4a")
startLab("Lab4a", "NNedd")
load("more/ames.RData")
load("more/ames.RData")
area <- ames$Gr.Liv.Area
price <- ames$SalePrice
summary(area)
hist(area)
samp1 <- sample(area, 50)
summary(samp1)
hist(samp1)
mean(samp1)
hist(samp1)
samp2 <- sample(area, 50)
mean(samp2)
samp3 <- sample(area, 100)
mean(samp3)
samp4 <- sample(area, 1000)
mean(samp4)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
hist(sample_means50, breaks = 25)
sample_means50 <- rep(NA, 5000)
samp <- sample(area, 50)
sample_means50[1] <- mean(samp)
samp <- sample(area, 50)
sample_means50[2] <- mean(samp)
samp <- sample(area, 50)
sample_means50[3] <- mean(samp)
samp <- sample(area, 50)
sample_means50[4] <- mean(samp)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
print(i)
}
sample_means_small <- rep(0, 100)
for ( i in 1:100){
smp <- sample(area, 50)
sample_means_small[i] <- mean(smp)
}
sample_means_small
hist(sample_means50)
sample_means10 <- rep(NA, 5000)
sample_means100 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
par(mfrow = c(3, 1))
xlimits <- range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
price_Samp <- sample(price, 50)
price_Samp
price_Samp <- sample(price, 50)
mean(price_Samp)
setwd("~/CUNY MSDA/MSDA Github repository/Data606")
library(DATA606)
startLab("Lab 4b")
startLab("Lab 4b")
setwd("~/CUNY MSDA/MSDA Github repository/Data606")
startLab("Lab 4b")
getLabs()
startLab("Lab4b")
load("more/ames.RData")
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
